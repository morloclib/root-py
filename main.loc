module root-py (*)

import root

idpy a :: a -> a

source Py from "core.py"
    ( "morloc_idpy" as idpy
    , "morloc_zipWith" as zipWith
    , "morloc_fst" as fst
    , "morloc_snd" as snd
    , "morloc_toFst" as toFst
    , "morloc_toSnd" as toSnd
    , "morloc_fst3" as fst3
    , "morloc_snd3" as snd3
    , "morloc_thr3" as thr3
    , "morloc_ifelse" as ifelse
    , "morloc_branch" as branch
    , "morloc_not" as not
    , "morloc_and" as and
    , "morloc_or" as or
    , "morloc_head" as head
    , "morloc_tail" as tail
    , "morloc_last" as last
    , "morloc_take" as take
    , "morloc_drop" as drop
    , "morloc_init" as init
    )

-- This approach of defining generic instances reduces repetition when every
-- instance will source the same function (the generic "==" function from Python,
-- here). However, it also implies that ALL types are members, even though some
-- things cannot be meaningfully equated. I need a better system.
instance Eq a where
  -- this will work for any type that defines a '==' operator
  source Py from "core.py" ("morloc_eq" as eq)

instance Ord a where
  -- this will work for any type that defines a '<=' operator
  source Py from "core.py" ("morloc_le" as le)

instance Integral Int where
  source Py from "core.py"
    ( "morloc_neg" as neg
    , "morloc_add" as add
    , "morloc_sub" as sub
    , "morloc_mul" as mul
    )
  zero = 0

instance Integral Real where
  source Py from "core.py"
    ( "morloc_neg" as neg
    , "morloc_add" as add
    , "morloc_sub" as sub
    , "morloc_mul" as mul
    )
  zero = 0.0

instance Numeric Real where
  source Py from "core.py"
    ( "morloc_inv" as inv
    , "morloc_div" as div
    , "morloc_exp" as exp
    , "morloc_log" as log
    )
  one = 1.0


instance Monoid Str where
  mempty = ""
  source Py from "core.py" ("morloc_add" as mappend)

instance Monoid (List a) where
  mempty = []
  source Py from "core.py" ("morloc_add" as mappend)


instance Foldable List where
  -- this will apply to any object in Python that is iterable
  source Py from "core.py" ("morloc_fold" as fold)

instance Functor List where
  source Py from "core.py" ("morloc_map" as map)

instance Sequence List where
  empty = []
  source Py from "core.py"
    ( "morloc_at" as at
    , "morloc_slice" as slice
    )


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

type Py => (Map key val) = "dict" key val

instance Packable ([key],[val]) (Map key val) where
  source py from "data.py"
   ( "morloc_packMap" as pack
   , "morloc_unpackMap" as unpack
   )


instance Packable (Int) Unit where
  source Py from "data.py"
   ( "morloc_packUnit" as pack
   , "morloc_unpackUnit" as unpack
   )
